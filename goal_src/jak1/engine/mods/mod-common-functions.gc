;;-*-Lisp-*-
(in-package goal)

;; name: mod-common-functions.gc
;; name in dgo: mod-common-functions
;; dgos: TODO

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| This file is a place where you can define custom functions and GOAL code
 to call inside of mod-custom-code.gc for example I have defined a function that increases
 the powercell count by one when it is called
 |#


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Useful GOAL modding documentation
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| 
Checks the condition and if it is true it does first argument if false it does optional second argument
(if (condition) (do if true) (do if false))

Gives a random FLOAT or INT between the provided ranges when called
(rand-vu-float-range 0.0 2.0)
(rand-vu-int-range 0 10)

if the result of rand-vu-int-range is 1, then DANCE! if it is not 1, then Don't dance
(if (= (rand-vu-int-range 0 10) 1) (DANCE!) (Don't dance))


|#

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Custom Variables to use in mods
;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Custom Functions to call in mods
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; add your own unique custom functions here!

;; Macros can be used more-or-less just like functions
(defmacro current-cell-count ()
  `(-> *game-info* fuel)
  )

(defmacro set-current-cell-count (count)
  `(set! (-> *game-info* fuel) ,count)
  )
  
(defun increase-power-cell-by-one ()
  (set-current-cell-count (+ (current-cell-count) 1))
  ;; with the two macros defined above, this is equivalent to
  ;; (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
  (none)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Approved Custom Functions/Macros to call in all mods
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; These are included with the mod base and you are welcome to use them in your mods!

(defmacro current-checkpoint-name ()
  `(-> *game-info* current-continue name)
  )

(defun set-current-checkpoint-by-name ((name string))
  (set-continue! *game-info* name)
  )

(defmacro current-level-name ()
  `(-> (level-get-target-inside *level*) name)
  )
  
(defmacro current-orb-count ()
  `(-> *game-info* money)
  )

(defmacro current-cutscene ()
  `(-> *art-control* active-stream)
  )

;;This function moves an actor to the given coordinates
;;example: (move-actor "farmer-3" 3.0 74.0 -120.0)
(defun move-actor ((actor-name string) (x float) (y float) (z float))
  (when (entity-by-name actor-name)
    (let* ((entity-actor (entity-by-name actor-name))
           (actor (-> entity-actor extra process))
           )
      (when actor
        (case (-> actor type)
          ((fuel-cell)
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the fuel-cell actor) base) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the fuel-cell actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
            (when (name= (-> (the fuel-cell actor) state name) 'wait)
              ;; only move collision when idle (messes up glowing in cutscene)
              (set! (-> (the fuel-cell actor) root-override root-prim world-sphere x) (meters x))
              (set! (-> (the fuel-cell actor) root-override root-prim world-sphere y) (meters y))
              (set! (-> (the fuel-cell actor) root-override root-prim world-sphere z) (meters z))
              )
            )
          ((orb-cache-top)
            ;; don't move while its activated (let it go up/down)
            (when (not (name= (-> (the orb-cache-top actor) state name) 'orb-cache-top-activate))
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the orb-cache-top actor) basetrans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the orb-cache-top actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
              (set! (-> (the orb-cache-top actor) root-override root-prim world-sphere x) (meters x))
              (set! (-> (the orb-cache-top actor) root-override root-prim world-sphere y) (meters y))
              (set! (-> (the orb-cache-top actor) root-override root-prim world-sphere z) (meters z))
              (set-vector! (-> (the orb-cache-top actor) draw origin) (meters x) (meters y) (meters z) 1.0)
              (let ((radius (-> (the process-drawable actor) draw radius))
                    (bounds (res-lump-data entity-actor 'visvol (inline-array vector)))
                    )
                (set-vector! (-> bounds 0) (- (meters x) radius) (meters y) (- (meters z) radius) 1.0)
                (set-vector! (-> bounds 1) (+ (meters x) radius) (meters y) (+ (meters z) radius) 1.0)
                )
              )
            )
          ((money)
            ;; don't move orbs if being blue-eco-sucked
            (when (not (logtest? (-> (the money actor) flags) (collectable-flags suck)))
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the money actor) base) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the money actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
              (set! (-> (the money actor) root-override root-prim world-sphere x) (meters x))
              (set! (-> (the money actor) root-override root-prim world-sphere y) (meters y))
              (set! (-> (the money actor) root-override root-prim world-sphere z) (meters z))
              )
            )
          ((crate crate-buzzer)
            ;; only move crates if they're not jumping
            (when (= (-> (the crate actor) smush amp) 0.0)
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the crate actor) base) (meters x) (meters y) (meters z) 1.0)
              ;; (set-vector! (-> (the crate actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
              ;; (set! (-> (the crate actor) root-override root-prim world-sphere x) (meters x))
              ;; (set! (-> (the crate actor) root-override root-prim world-sphere y) (meters y))
              ;; (set! (-> (the crate actor) root-override root-prim world-sphere z) (meters z))
              )
            )
          ((darkvine)
            (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
            (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
            (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
          )
          (else
            (format 0 "unexpected actor type ~S ~S ~S~%" actor-name (-> entity-actor type) (-> actor type))
            (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
            (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
            (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
            )
          )
        )
      )
    )
  (none)
  )

(defun spawn-actor-by-name ((name string))
  ;; Takes in the string of name of a actor, and spawns a new process based on the entity.
    (let* ((entity-actor (the entity-actor (entity-by-name name)))
          (type (-> entity-actor etype))
          (e-info (entity-info-lookup type))
      )
      (when (entity-by-name name)
        (init-entity 
          (get-process *default-dead-pool* type (if e-info (-> e-info heap-size) #x4000)) 
          entity-actor)
          (sound-play "buzzer-pickup")
      )
      (if (not (entity-by-name name))
          (sound-play "oof")
      )
    )
    (none)
)

;;Draws a debug sphere on the actor, takes in a string actor name and a radius for the sphere in meters
(defun draw-debug-sphere-on-actor ((actorName string)(radius float))
  (when *debug-segment*
    (when (process-by-ename actorName)
      (add-debug-sphere #t (bucket-id debug)  (-> (the-as process-drawable (process-by-ename actorName)) root trans) (meters radius) (static-rgba 0 #xff 0 #x40))
    )
  )
  (none)
)


;;This function moves a given actor to jaks current position, then prints a (move-actors) call in gk.exe
(defun move-to-jak ((arg0 string))
(format #t "move-actor code:  (move-actor ~a ~m ~m ~m)~%" arg0(-> (target-pos 0) x) (-> (target-pos 0) y) (-> (target-pos 0) z))
  (when (process-by-ename arg0)
    (set-vector!  (-> (-> (the process-drawable (process-by-ename arg0))root)trans) (-> (target-pos 0) x) (-> (target-pos 0) y) (-> (target-pos 0) z) 1.0)
    (if (type-type? (-> (process-by-ename arg0) type) crate)
    (begin
        (set! (-> (the crate (process-by-ename arg0)) base y) (-> (target-pos 0) y))
    )
    (none)
    )

     (if (type-type? (-> (process-by-ename arg0) type) money)
    (begin
        (set! (-> (the money (process-by-ename arg0)) base y) (-> (target-pos 0) y))
    )
    (none)
    )

     (if (type-type? (-> (process-by-ename arg0) type) fuel-cell)
    (begin
        (set! (-> (the fuel-cell (process-by-ename arg0)) base y) (-> (target-pos 0) y))
    )
    (none)
    )
  )
)

;; quick macro for setting vector xyz in meters, leaving w alone
(defmacro set-vector-meters! (dst x y z)
  `(set-vector! ,dst (meters ,x) (meters ,y) (meters ,z) (-> ,dst w))
  )

;; quick macro for constructing static vector with w=1
(defmacro static-vector-meters (x y z)
  `(new 'static 'vector :x (meters ,x) :y (meters ,y) :z (meters ,z) :w 1.0)
  )

;; prints vector xyz in meters
(defmacro print-vector-meters (vec &key (dst #t))
  `(format ,dst "~m ~m ~m~%" (-> ,vec x) (-> ,vec y) (-> ,vec z))
  )

;; takes a path-control and xyz values to offsets every node in the path by
(defmacro shift-path! (path x y z)
  `(let ((voff (static-vector-meters ,x ,y ,z)))
    (dotimes (idx (-> ,path num-cverts))
      (vector+! (-> ,path cverts idx) (-> ,path cverts idx) voff)
      )
    )
  )

;; prints all the nodes in a path in meters
(defmacro path-print-meters (path)
  `(dotimes (idx (-> ,path num-cverts))
    (print-vector-meters (-> ,path cverts idx))
    )
  )

;; prints the position (root trans) of a process-drawable
(defmacro pd-pos-m (procname)
  `(let* ((obj (the process-drawable (process-by-ename ,procname)))
          (vec (-> obj root trans)))
    (format 0 "~m ~m ~m~%" (-> vec x) (-> vec y) (-> vec z) 4096.0)
    (none)
    )
  )

;;This function moves an actor based on jaks position + an offset
(defun move-to-behind-jak ((arg0 string) (arg1 meters) (arg2 meters))
 (when (process-by-ename arg0)
    (set-vector!  (-> (-> (the process-drawable (process-by-ename arg0))root)trans) (-(-> (target-pos 0) x) (meters arg1)) (+ (-> (target-pos 0) y) (meters arg2)) (-(-> (target-pos 0) z)(meters arg1)) 1.0)
    (if (type-type? (-> (process-by-ename arg0) type) money)
    (begin
        (set! (-> (the money (process-by-ename arg0)) base y) (->  (target-pos 0) y) )
    )
    (none)
    )
    (if (type-type? (-> (process-by-ename arg0) type) fuel-cell)
    (begin
        (set! (-> (the fuel-cell (process-by-ename arg0)) base y) (->  (target-pos 0) y) )
    )
    (none)
    )
  )
)

  ;; prints the position (root trans) of a process-drawable
(defmacro pd-pos-m (procname)
  `(let* ((obj (the process-drawable (process-by-ename ,procname)))
          (vec (-> obj root trans)))
    (format 0 "~m ~m ~m~%" (-> vec x) (-> vec y) (-> vec z) 4096.0)
    (none)
    )
  )

    
    ;;)
  ;;)

(defmacro mod-override-money-position-training (obj arg0)
  `(case (-> obj name) :comp name=
  (('money-4391) (set-vector-meters! (-> arg0 extra trans) -1319.7 21.5 1076.4))
  (('money-4393) (set-vector-meters! (-> arg0 extra trans) -1322.0 53.0 1091.0))   
  (('money-4395) (set-vector-meters! (-> arg0 extra trans) -1164.0 62.5 1031.0))
  (('money-4396) (set-vector-meters! (-> arg0 extra trans) -1242.0 5.5 1018.0))    
  (('money-4397) (set-vector-meters! (-> arg0 extra trans) -1088.0 -8.0 995.0))   
  (('money-4399) (set-vector-meters! (-> arg0 extra trans) -1177.0 6.0 905.0)) 
  (('money-4401) (set-vector-meters! (-> arg0 extra trans) -1187.0 36.5 869.0)) 
  (('money-4402) (set-vector-meters! (-> arg0 extra trans) -1274.0 11.0 868.0))
  (('money-4403) (set-vector-meters! (-> arg0 extra trans) -1340.0 34.5 843.0))
  (('money-4404) (set-vector-meters! (-> arg0 extra trans) -1299.0 -8.0 945.0))
  (('money-4405) (set-vector-meters! (-> arg0 extra trans) -1126.0 49.0 989.0))
  (('money-4406) (set-vector-meters! (-> arg0 extra trans) -1170.5 15.0 839.7))
  (('money-4407) (set-vector-meters! (-> arg0 extra trans) -1209.0 55.3 912.0))
  (('money-4345) (set-vector-meters! (-> arg0 extra trans) -1290.0 25.5 858.2))
  (('money-4347) (set-vector-meters! (-> arg0 extra trans) -1241.0 8.0 951.0))
  (('money-4349) (set-vector-meters! (-> arg0 extra trans) -1316.0 -160.0 1073.0))
  (('money-4330) (set-vector-meters! (-> arg0 extra trans) -1316.0 -180.0 1073.0))
  (('money-4331) (set-vector-meters! (-> arg0 extra trans) -1316.0 -200.0 1073.0))
  (('money-4327) (set-vector-meters! (-> arg0 extra trans) -1316.0 -220.0 1073.0))
  (('money-4326) (set-vector-meters! (-> arg0 extra trans) -1204.0 34.0 946.0))
  (('money-4328) (set-vector-meters! (-> arg0 extra trans) -1188.0 34.0 887.0))
  (('money-4332) (set-vector-meters! (-> arg0 extra trans) -1206.9 20.5 884.6))
  (('money-4333) (set-vector-meters! (-> arg0 extra trans) -1318.0 46.0 1040.0))
  (('money-4794) (set-vector-meters! (-> arg0 extra trans) -1172.2 41.0 897.3))    
  (('money-4336) (set-vector-meters! (-> arg0 extra trans) -1308.6 52.5 857.2))    
  (('money-4337) (set-vector-meters! (-> arg0 extra trans) -1297.2 53.8 829.4))    
  (('money-4338) (set-vector-meters! (-> arg0 extra trans) -1395.8 -12.0 781.8))    
  (('money-4354) (set-vector-meters! (-> arg0 extra trans) -1136.6 4.6 910.4))    
  (('money-4356) (set-vector-meters! (-> arg0 extra trans) -1295.8 4.6 937.6))    
  (('money-4358) (set-vector-meters! (-> arg0 extra trans) -1309.6 7.9 990.6))    
  (('money-4367) (set-vector-meters! (-> arg0 extra trans) -1169.6 39.6 939.5))   
  (('money-4366) (set-vector-meters! (-> arg0 extra trans) -1165.7 14.0 983.9))    
  (('money-4365) (set-vector-meters! (-> arg0 extra trans) -1101.3 3.3 1065.4))    
  (('money-4364) (set-vector-meters! (-> arg0 extra trans) -1341.7 41.7 958.6))    
  (('money-4363) (set-vector-meters! (-> arg0 extra trans) -1332.9 -6.0 1063.1))   
  (('money-4369) (set-vector-meters! (-> arg0 extra trans) -946.9 4.8 934.3))   
  (('money-4370) (set-vector-meters! (-> arg0 extra trans) -1132.9 20.5 1000.8))   
  (('money-4444) (set-vector-meters! (-> arg0 extra trans) -1246.0 66.2 892.9))  
  (('money-4443) (set-vector-meters! (-> arg0 extra trans) -1267.4 19.6 985.0))   
  (('money-4442) (set-vector-meters! (-> arg0 extra trans) -1099.9 33.0 987.0))   
  (('money-4440) (set-vector-meters! (-> arg0 extra trans) -1294.1 56.9 901.5))   
  (('money-4439) (set-vector-meters! (-> arg0 extra trans) -1085.2 23.0 1002.0))   
  (('money-4438) (set-vector-meters! (-> arg0 extra trans) -1255.9 33.7 982.9))   
  (('money-4383) (set-vector-meters! (-> arg0 extra trans) -1197.9 37.8 978.6))   
  (('money-4384) (set-vector-meters! (-> arg0 extra trans) -1308.7 19.3 912.3))   
  (('money-4381) (set-vector-meters! (-> arg0 extra trans) -1331.6 26.6 1013.6))    
  (('money-4791) (set-vector-meters! (-> arg0 extra trans) -1305.5 66.5 988.2))    
  (('money-4382) (set-vector-meters! (-> arg0 extra trans) -1332.8 76.1 965.6))    
  (('money-4793) (set-vector-meters! (-> arg0 extra trans) -1293.2 41.4 996.2))  
  (('money-4792) (set-vector-meters! (-> arg0 extra trans) -1153.1 -6.0 1054.6))
  )
)

(defmacro mod-override-money-position-village1 (obj arg0)
  `(case (-> obj name) :comp name=
  (('money-2676) (set-vector-meters! (-> arg0 extra trans) -137.1 47.8 218.9))     
  (('money-2689) (set-vector-meters! (-> arg0 extra trans) -124.7 35.6 204.5))     
  (('money-2690) (set-vector-meters! (-> arg0 extra trans) -140.4 35.6 212.6))    
  (('money-2692) (set-vector-meters! (-> arg0 extra trans)  102.3 57.0  64.3))     
  (('money-2688) (set-vector-meters! (-> arg0 extra trans)  123.4 44.5 -72.4))    
  (('money-2691) (set-vector-meters! (-> arg0 extra trans)  127.1 35.9 -43.9))     
  (('money-2669) (set-vector-meters! (-> arg0 extra trans)  101.5 41.4 -43.6))  
  (('money-2671) (set-vector-meters! (-> arg0 extra trans)   88.7 41.7 -41.1))     
  (('money-2672) (set-vector-meters! (-> arg0 extra trans)   85.3 33.3 -42.5))     
  (('money-2674) (set-vector-meters! (-> arg0 extra trans)   79.7 25.8 -39.3))     
  (('money-2670) (set-vector-meters! (-> arg0 extra trans)   88.4 29.6  18.2)) 
  (('money-2673) (set-vector-meters! (-> arg0 extra trans)   94.9 35.7   9.3))     
  (('money-2675) (set-vector-meters! (-> arg0 extra trans)   98.0 46.5  16.7))      
  (('money-2677) (set-vector-meters! (-> arg0 extra trans)  101.0 43.3  50.4))     
  (('money-2678) (set-vector-meters! (-> arg0 extra trans)  -22.8 41.0 -77.6))      
  (('money-2679) (set-vector-meters! (-> arg0 extra trans)  -35.7 54.2 -64.4))      
  (('money-2680) (set-vector-meters! (-> arg0 extra trans)  -31.9 55.0 -79.1))      
  (('money-2681) (set-vector-meters! (-> arg0 extra trans)  -18.7 52.5 -104.1))      
  (('money-2682) (set-vector-meters! (-> arg0 extra trans)   -6.6 54.1 -118.6))     
  (('money-2683) (set-vector-meters! (-> arg0 extra trans)   -8.6 55.9 -137.3))     
  (('money-2684) (set-vector-meters! (-> arg0 extra trans)    6.4 55.9 -140.8))     
  (('money-2685) (set-vector-meters! (-> arg0 extra trans)   24.8 57.1 -153.1))    
  (('money-2686) (set-vector-meters! (-> arg0 extra trans)  -36.2 50.4 -169.1))     
  (('money-2687) (set-vector-meters! (-> arg0 extra trans)   -9.4 49.2 -161.4))     
  (('money-3539) (set-vector-meters! (-> arg0 extra trans)  -34.4 53.8 -127.1))      
  (('money-3540) (set-vector-meters! (-> arg0 extra trans)  -61.1 50.4 -132.9))     
  (('money-3537) (set-vector-meters! (-> arg0 extra trans)  -60.6 50.4 -118.0))    
  (('money-3541) (set-vector-meters! (-> arg0 extra trans)  -59.5 49.3  -98.7))     
  (('money-3538) (set-vector-meters! (-> arg0 extra trans)  -45.1 53.0  -94.4))     
  (('money-2693) (set-vector-meters! (-> arg0 extra trans)   47.8 56.6 -165.0))      
  (('money-2694) (set-vector-meters! (-> arg0 extra trans)   62.9 57.8 -164.4))     
  (('money-2695) (set-vector-meters! (-> arg0 extra trans) -121.3 60.6  202.6))     
  (('money-2696) (set-vector-meters! (-> arg0 extra trans) -278.7  0.8  301.0))     
  (('money-2697) (set-vector-meters! (-> arg0 extra trans)  49.6 -22.6 -133.5))      
  (('money-2698) (set-vector-meters! (-> arg0 extra trans)  -46.4 13.1  169.1))    
  (('orb-cache-top-4) (set-vector-meters! (-> arg0 extra trans) -4.8 0.5 -145.8))
  )
)

(defun mod-override-init-position ((obj process-drawable) (arg0 entity-actor))
  (mod-override-money-position-training obj arg0)
  (mod-override-money-position-village1 obj arg0)

  (none)
)
